#include "main.h"
#include "shift_register.hpp"

// SPI handle autogenerated by CubeMX (e.g. SPI1 on PA5/PA7)
extern SPI_HandleTypeDef hspi1;

#define SR595_LATCH_GPIO_Port GPIOA
#define SR595_LATCH_Pin       GPIO_PIN_4

// For 74HC165: PL (parallel load) on PB0, CLOCK on PB1
#define SR165_PL_GPIO_Port    GPIOB
#define SR165_PL_Pin          GPIO_PIN_0
#define SR165_CLK_GPIO_Port   GPIOB
#define SR165_CLK_Pin         GPIO_PIN_1

int main(void) {
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_SPI1_Init();

  ShiftRegister595 sr595(hspi1, SR595_LATCH_GPIO_Port, SR595_LATCH_Pin);
  ShiftRegister165 sr165(hspi1,
                        SR165_PL_GPIO_Port, SR165_PL_Pin,
                        SR165_CLK_GPIO_Port, SR165_CLK_Pin);

  // Buffers sized by NUM_595 and NUM_165
  uint8_t outBuf[NUM_595] = {0xFF, 0x00};  // example pattern
  uint8_t inBuf [NUM_165] = {0};

  while (1) {
    // 1) update outputs
    sr595.write(outBuf);

    // 2) read inputs
    sr165.read(inBuf);

    // 3) do something: e.g. mirror input bit 0 to output bit 0
    bool bit0 = (inBuf[0] & 0x01);
    if (bit0)  outBuf[0] |=  0x01;
    else       outBuf[0] &= ~0x01;

    HAL_Delay(100);
  }
}
